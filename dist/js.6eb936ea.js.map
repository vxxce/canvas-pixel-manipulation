{"version":3,"sources":["js/transformations.js","js/index.js"],"names":["shuffle","arr","i","length","randIndInRange","Math","floor","random","swap","shufflePixels","canvas","ctx","imgData","getImageData","width","height","data","putImageData","channel1","channel2","colors","swap1","indexOf","swap2","Error","temp","invert","newData","j","push","sortPixels","imageSmoothingEnabled","console","time","Uint32Array","checkpoint","sort","a","b","n","timeEnd","document","getElementById","getContext","invertEm","swapEm","shuffleEm","sortButton","upload","resetButton","img","uploadHandler","file","files","src","URL","createObjectURL","draw","drawImage","revokeObjectURL","complete","addEventListener","querySelector","value"],"mappings":"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","file":"js.6eb936ea.js","sourceRoot":"..","sourcesContent":["const shuffle = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    // Every 4th index is an alpha value and should be 255. Don't change those.\n    if (i % 4 !== 3) {\n      // Selection range shrinks by one from left every loop\n      // e.g. [0, 1, 2, 3] -> [1, 2, 3] -> [2, 3] -> [3]\n      let randIndInRange = Math.floor(Math.random() * arr.length - 1) + 1;\n        // If selection is on 4th index (an alpha value), re-select.\n        while (randIndInRange % 4 === 3) {\n          randIndInRange = Math.floor(Math.random() * arr.length - 1) + 1;\n        }\n      // swap i and random index\n      let swap = arr[i];\n      arr[i] = arr[randIndInRange];\n      arr[randIndInRange] = swap;\n    }\n  }\n  return arr;\n}\n\nconst shufflePixels = (canvas, ctx) => {\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  let data = imgData.data;\n  data = shuffle(data);\n  ctx.putImageData(imgData, 0, 0);\n}\n\nconst swap = (canvas, ctx, channel1, channel2) => {\n  const colors = ['red', 'green', 'blue'];\n  const swap1 =  colors.indexOf(channel1);\n  const swap2 =  colors.indexOf(channel2);\n  if (swap1 < 0 || swap2 < 0) throw new Error('Invalid Arguments');\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  let data = imgData.data;\n\n  for (let i = 0; i < data.length; i += 4) {\n    let temp = data[i + swap1];\n    data[i + swap1] = data[i + swap2];\n    data[i + swap2] = temp;\n  }\n  ctx.putImageData(imgData, 0, 0);\n}\n\nconst invert = (canvas, ctx) => {\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  let data = imgData.data;\n  let newData = [];\n\n  for (let j = 0; j < data.length; j += 4) {\n    newData.push(255 - data[j], 255 - data[j+1], 255 - data[j+2], 255);\n  }\n  for (let i = 0; i < data.length; i++) {\n    data[i] = newData[i];\n  }\nctx.putImageData(imgData, 0, 0);\n}\n\nconst sortPixels = (canvas, ctx) => {\n  ctx.imageSmoothingEnabled = false\n  console.time('start')\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  let data = imgData.data;\n\n  let newData = new Uint32Array(data.length / 4);\n\n  for (let i=0; i < data.length; i++) {\n    let checkpoint =  i * 4\n    newData[i]= data[checkpoint] << 16 | data[checkpoint + 1] << 8 | data[checkpoint + 2];\n  }\n\n  newData.sort((a, b) => a - b);\n\n  for (let i in newData) {\n    let checkpoint = i * 4\n    let n = newData[i]\n    data[checkpoint] = n >> 16;\n    data[checkpoint + 1] = (n >> 8) & 0xff;\n    data[checkpoint + 2] = n & 0xff;\n  }\n  console.timeEnd('start')\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport { shufflePixels, swap, invert, sortPixels };\n","import { shufflePixels, invert, swap, sortPixels } from './transformations';\n\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\nconst invertEm = document.getElementById('invert');\nconst swapEm = document.getElementById('swapChannels');\nconst shuffleEm = document.getElementById('shuffleEm');\nconst sortButton = document.getElementById('sortEm');\nconst upload = document.getElementById('image-upload');\nconst resetButton = document.getElementById('reset');\nconst img = document.getElementById('source-image');\n\nconst uploadHandler = () => {\n  let file = upload.files[0];\n  img.src = URL.createObjectURL(file);\n}\n\nconst draw = () => {\n  canvas.height = img.height;\n  canvas.width = img.width;\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n  URL.revokeObjectURL(img.src);\n}\n\nif (img.complete) {\n  draw();\n}\nimg.addEventListener('load', draw);\nupload.addEventListener('change', uploadHandler);\ninvertEm.addEventListener('click', () => invert(canvas, ctx));\nswapEm.addEventListener('click', () => {\n  swap(canvas, ctx, document.querySelector('#channel1').value, document.querySelector('#channel2').value);\n})\nsortButton.addEventListener('click', () => sortPixels(canvas, ctx));\nshuffleEm.addEventListener('click', () => shufflePixels(canvas, ctx));\nresetButton.addEventListener('click', draw);\n"]}