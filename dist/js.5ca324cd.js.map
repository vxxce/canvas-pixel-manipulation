{"version":3,"sources":["js/utils.js","js/transformations.js","js/index.js"],"names":["rgbToHsl","r","g","b","min","Math","max","delta","lum","hue","sat","deltaR","deltaG","deltaB","hueToRgb","q","z","t","hslToRgb","h","s","l","shuffle","arr","i","length","randIndInRange","floor","random","swap","shufflePixels","canvas","ctx","imgData","getImageData","width","height","data","putImageData","channel1","channel2","colors","swap1","indexOf","swap2","Error","temp","invert","newData","j","push","sortPixels","checkpoint","sort","hslArr1","hslArr2","hslArr","desaturate","averageLightness","document","getElementById","getContext","invertEm","swapEm","shuffleEm","sortButton","upload","resetButton","desaturateButton","img","uploadHandler","file","files","src","URL","createObjectURL","draw","drawImage","revokeObjectURL","complete","addEventListener","querySelector","value"],"mappings":"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","file":"js.5ca324cd.js","sourceRoot":"..","sourcesContent":["const rgbToHsl = (r, g, b) => {\n  r /= 255\n  g /= 255\n  b /= 255\n\n  let min = Math.min(r, g, b) //Min. value of RGB\n  let max = Math.max(r, g, b) //Max. value of RGB\n  let delta = max - min //Delta RGB value\n\n  let lum = (max + min) / 2\n\n  let hue = 0\n  let sat = 0\n  if (delta == 0) {\n    return [hue, sat, lum]\n  } else {\n    if (lum < 0.5) {\n      sat = delta / (max + min)\n    } else {\n      sat = delta / (2 - max - min)\n    }\n\n    let deltaR = ((max - r) / 6 + delta / 2) / delta\n    let deltaG = ((max - g) / 6 + delta / 2) / delta\n    let deltaB = ((max - b) / 6 + delta / 2) / delta\n\n    if (r == max) {\n      hue = deltaB - deltaG\n    } else if (g == max) {\n      hue = 1 / 3 + deltaR - deltaB\n    } else if (b == max) {\n      hue = 2 / 3 + deltaG - deltaR\n    }\n    if (hue < 0) {\n      hue += 1\n    }\n    if (hue > 1) {\n      hue -= 1\n    }\n  }\n  return [hue, sat, lum]\n}\n\nlet hueToRgb = (q, z, t) => {\n  if (t < 0) {\n    t += 1\n  }\n  if (t > 1) {\n    t -= 1\n  }\n  if (6 * t < 1) {\n    return q + (z - q) * 6 * t\n  }\n  if (2 * t < 1) {\n    return z\n  }\n  if (3 * t < 2) {\n    return q + (z - q) * (2 / 3 - t) * 6\n  }\n  return q\n}\n\nlet hslToRgb = (h, s, l) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  let q = 0\n  let z = 0\n  if (s == 0) {\n    r = l * 255\n    g = l * 255\n    b = l * 255\n  } else {\n    if (l < 0.5) {\n      q = l * (1 + s)\n    } else {\n      q = l + s - s * l\n    }\n    z = 2 * l - q\n\n    r = 255 * hueToRgb(z, q, h + 1 / 3)\n    g = 255 * hueToRgb(z, q, h)\n    b = 255 * hueToRgb(z, q, h - 1 / 3)\n    return [r, g, b]\n  }\n  return [r, g, b]\n}\n\nexport { rgbToHsl, hslToRgb }\n","import { rgbToHsl, hslToRgb } from \"./utils\";\n\nconst shuffle = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    // Every 4th index is an alpha value and should be 255. Don't change those.\n    if (i % 4 !== 3) {\n      // Selection range shrinks by one from left every loop\n      // e.g. [0, 1, 2, 3] -> [1, 2, 3] -> [2, 3] -> [3]\n      let randIndInRange = Math.floor(Math.random() * arr.length - 1) + 1\n      // If selection is on 4th index (an alpha value), re-select.\n      while (randIndInRange % 4 === 3) {\n        randIndInRange = Math.floor(Math.random() * arr.length - 1) + 1\n      }\n      // swap i and random index\n      let swap = arr[i]\n      arr[i] = arr[randIndInRange]\n      arr[randIndInRange] = swap\n    }\n  }\n  return arr\n}\n\nconst shufflePixels = (canvas, ctx) => {\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let data = imgData.data\n  data = shuffle(data)\n  ctx.putImageData(imgData, 0, 0)\n}\n\nconst swap = (canvas, ctx, channel1, channel2) => {\n  const colors = [\"red\", \"green\", \"blue\"]\n  const swap1 = colors.indexOf(channel1)\n  const swap2 = colors.indexOf(channel2)\n  if (swap1 < 0 || swap2 < 0) throw new Error(\"Invalid Arguments\")\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let data = imgData.data\n\n  for (let i = 0; i < data.length; i += 4) {\n    let temp = data[i + swap1]\n    data[i + swap1] = data[i + swap2]\n    data[i + swap2] = temp\n  }\n  ctx.putImageData(imgData, 0, 0)\n}\n\nconst invert = (canvas, ctx) => {\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let data = imgData.data\n  let newData = []\n\n  for (let j = 0; j < data.length; j += 4) {\n    newData.push(255 - data[j], 255 - data[j + 1], 255 - data[j + 2], 255)\n  }\n  for (let i = 0; i < data.length; i++) {\n    data[i] = newData[i]\n  }\n  ctx.putImageData(imgData, 0, 0)\n}\n\nconst sortPixels = (canvas, ctx) => {\n\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let data = imgData.data\n\n  let newData = []\n\n  for (let i = 0; i < data.length / 4; i++) {\n    let checkpoint = i * 4\n    newData.push(\n      rgbToHsl(data[checkpoint], data[checkpoint + 1], data[checkpoint + 2])\n    )\n  }\n\n  newData.sort((hslArr1, hslArr2) => hslArr1[0] - hslArr2[0])\n\n  for (let i in newData) {\n    let checkpoint = i * 4\n    let hslArr = newData[i]\n    let [r, g, b] = hslToRgb(...hslArr)\n    data[checkpoint] = r\n    data[checkpoint + 1] = g\n    data[checkpoint + 2] = b\n  }\n  ctx.putImageData(imgData, 0, 0)\n}\n\nconst desaturate = (canvas, ctx) => {\n  let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let data = imgData.data\n\n  for (let i = 0; i < data.length; i += 4) {\n    let averageLightness = Math.floor((data[i] + data[i + 1] + data[i + 2]) / 3)\n    data[i] = data[i + 1] = data[i + 2] = averageLightness\n  }\n  ctx.putImageData(imgData, 0, 0)\n}\n\n\nexport { shufflePixels, swap, invert, sortPixels, desaturate };\n","import { shufflePixels, invert, swap, sortPixels, desaturate } from './transformations';\n\nconst canvas = document.getElementById(\"canvas\")\nconst ctx = canvas.getContext(\"2d\")\nconst invertEm = document.getElementById(\"invert\")\nconst swapEm = document.getElementById(\"swapChannels\")\nconst shuffleEm = document.getElementById(\"shuffleEm\")\nconst sortButton = document.getElementById(\"sortEm\")\nconst upload = document.getElementById(\"image-upload\")\nconst resetButton = document.getElementById(\"reset\")\nconst desaturateButton = document.getElementById(\"desaturate\")\nconst img = document.getElementById(\"source-image\")\n\nconst uploadHandler = () => {\n  let file = upload.files[0]\n  img.src = URL.createObjectURL(file)\n}\n\nconst draw = () => {\n  canvas.height = img.height\n  canvas.width = img.width\n  ctx.drawImage(img, 0, 0, img.width, img.height)\n  URL.revokeObjectURL(img.src)\n}\n\nif (img.complete) {\n  draw()\n}\nimg.addEventListener(\"load\", draw)\nupload.addEventListener(\"change\", uploadHandler)\ninvertEm.addEventListener(\"click\", () => invert(canvas, ctx))\nswapEm.addEventListener(\"click\", () => {\n  swap(\n    canvas,\n    ctx,\n    document.querySelector(\"#channel1\").value,\n    document.querySelector(\"#channel2\").value\n  )\n})\nsortButton.addEventListener(\"click\", () => sortPixels(canvas, ctx))\nshuffleEm.addEventListener(\"click\", () => shufflePixels(canvas, ctx))\ndesaturateButton.addEventListener(\"click\", () => desaturate(canvas, ctx))\nresetButton.addEventListener(\"click\", draw)\n"]}